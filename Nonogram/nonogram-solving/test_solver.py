import unittest
from nonogram_solver import nonogramSolver

class TestNonogramSolver(unittest.TestCase):
    def setUp(self):
        self.solver = nonogramSolver([], [])

    def test_are_columns_valid_small_nonograms(self):
        small_nonograms = [
            ([[2], [1, 2], [4], [1,1], [1,1]], [[2], [3], [1], [5], [2]]),
            ([[3], [1,1,1], [1,3], [1,1], [3]], [[3], [1,1], [3,1], [1,1,1], [3]]),
            ([[5], [3], [1], [1,1], [5]], [[1,1], [2,2], [3,1], [2,2], [1,1]]),
            ([[1], [2, 2], [3], [3], [1]], [[1], [4], [3], [3], [1]])
        ]

        for row_args, col_args in small_nonograms:
            self.solver.row_args = row_args
            self.solver.col_args = col_args
            complete_boards = [
                [[1, 1, 1, 2, 2], [2, 1, 1, 2, 2], [2, 2, 2, 2, 1], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1]],
                [[1, 2, 2, 2, 1], [2, 1, 2, 1, 2], [2, 1, 2, 2, 2], [2, 1, 1, 1, 2], [1, 2, 2, 2, 1]],
                [[2, 2, 2, 2, 2], [1, 2, 2, 2, 1], [1, 1, 2, 1, 1], [1, 2, 1, 2, 1], [2, 2, 2, 2, 2]],
                [[1, 2, 1, 1, 1], [2, 2, 1, 2, 2], [1, 2, 2, 2, 1], [1, 2, 2, 2, 1], [1, 1, 2, 1, 1]]
            ]
            
            for board in complete_boards:
                self.solver.board = board
                for i in range(len(board[0])):
                    self.assertTrue(self.solver.are_columns_valid(i))
                    
    def test_are_columns_valid_medium_nonograms(self):
        medium_nonograms = [
            ([[2, 1], [1, 3], [1, 2], [3], [4], [1]], [[1], [5], [2], [5], [2, 1], [2]]),
            ([[1,1], [3], [3], [4], [6], [5], [1,1,3], [6]], [[3,1], [4,1], [8], [3,1], [5], [4], [4]]),
            ([[2], [6], [6], [2], [2,4], [2,1], [6,1], [10]], [[1], [2,2], [2,2], [8], [8], [2,2], [2,1,2], [1,1], [1,1], [4]])
        ]

        for row_args, col_args in medium_nonograms:
            self.solver.row_args = row_args
            self.solver.col_args = col_args
            complete_boards = [
                [[2, 1, 2, 1, 1, 1, 1], [2, 2, 2, 1, 1, 1, 1], [2, 2, 2, 1, 1, 1, 1], [1, 2, 2, 2, 2, 1, 1], [1, 2, 2, 2, 2, 2, 2], [1, 1, 2, 2, 2, 2, 2], [2, 1, 2, 1, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2]],
                [[1, 1, 1, 2, 1, 1, 1, 1, 1, 1], [1, 1, 1, 2, 1, 1, 1, 1, 1, 1], [1, 1, 2, 2, 2, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 1, 1, 2, 1], [1, 1, 1, 2, 2, 2, 2, 1, 1, 2], [1, 1, 1, 2, 2, 2, 2, 2, 1, 2], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 2, 1, 2, 2, 2, 2], [1, 1, 1, 2, 2, 2, 2, 2, 2, 1]],
                [[1, 1, 1, 1, 1, 1, 2, 2, 2, 1], [2, 1, 1, 1, 1, 2, 2, 2, 1, 2], [2, 2, 1, 1, 2, 1, 2, 1, 2, 2], [1, 2, 1, 2, 1, 2, 1, 2, 2, 2], [1, 2, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 1], [1, 2, 2, 1, 2, 1, 2, 1, 1, 1], [2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 2, 1, 1], [2, 2, 2, 1, 1, 1, 1, 2, 2, 1]]
            ]

            for board in complete_boards:
                self.solver.board = board
                for i in range(len(board[0])):
                    self.assertTrue(self.solver.are_columns_valid(i))
                    
    def test_are_columns_valid_large_nonograms(self):
        large_nonograms = [
            ([[3], [1, 3, 1], [2, 1, 1, 2], [1, 1, 1, 3], [2, 1, 1, 1], [1, 1, 1, 1], [2, 1, 1], [6], [8], [3, 2]], [[2, 3], [8], [1, 4], [1, 1, 2], [1, 1, 3], [1, 1, 1, 2], [3, 1, 1, 1], [2, 1, 1, 2], [1, 3, 1], [3]]),
            ([[1, 1], [1, 1], [10], [1, 2, 2], [3, 1], [1, 1, 1], [3, 1], [4, 2], [10], [1, 1]], [[7], [1, 1, 4], [1, 7], [3, 2], [1, 1], [1, 1], [2, 1], [1, 1, 1], [2, 3], [7]]),
            ([[1], [1], [3], [5], [6, 1], [4, 1], [5, 1], [7], [1, 4], [6]], [[2], [2], [3], [8, 1], [8], [4, 1], [5], [4], [1, 3], [4]])
        ]

        for row_args, col_args in large_nonograms:
            self.solver.row_args = row_args
            self.solver.col_args = col_args
            complete_boards = [
                [[1, 2, 1, 1, 1], [2, 2, 1, 2, 2], [1, 2, 2, 2, 1], [1, 2, 2, 2, 1], [1, 1, 2, 1, 1]],
                [[2, 2, 1, 1, 1, 2], [1, 2, 1, 2, 2, 2], [1, 2, 1, 2, 2, 1], [1, 2, 2, 2, 1, 1], [1, 2, 2, 2, 2, 1], [1, 1, 1, 2, 1, 1]],
                [[2, 1, 2, 1, 1, 1, 1], [2, 2, 2, 1, 1, 1, 1], [2, 2, 2, 1, 1, 1, 1], [1, 2, 2, 2, 2, 1, 1], [1, 2, 2, 2, 2, 2, 2], [1, 1, 2, 2, 2, 2, 2], [2, 1, 2, 1, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2]],
                [[1, 1, 1, 2, 1, 1, 1, 1, 1, 1], [1, 1, 1, 2, 1, 1, 1, 1, 1, 1], [1, 1, 2, 2, 2, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 1, 1, 2, 1], [1, 1, 1, 2, 2, 2, 2, 1, 1, 2], [1, 1, 1, 2, 2, 2, 2, 2, 1, 2], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 2, 1, 2, 2, 2, 2], [1, 1, 1, 2, 2, 2, 2, 2, 2, 1]]
            ]

            for board in complete_boards:
                self.solver.board = board
                for i in range(len(board[0])):
                    self.assertTrue(self.solver.are_columns_valid(i))

                    
                    


if __name__ == '__main__':
    unittest.main()